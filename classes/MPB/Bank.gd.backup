class_name Bank extends Node2D

var Velocities = []
var Programs = []
var Splits = [] # all splits inside this bank
var ToneDatas = []

func loadMpbFile(fileToLoad):
	if not FileAccess.file_exists(fileToLoad):
		return # Error! We don't have a file to load.
	
	var mpbFile = FileAccess.open(fileToLoad, FileAccess.READ)
	
	# does it start with "SMPB" and is that followed by a 2
	if mpbFile.get_32() != 1112558931:
		print("Error: Not an MPB")
		return 1
	if mpbFile.get_32() != 2:
		print("Error: Wrong MPB format version (must be 2)")
		return 1
	
	var ptrStart = mpbFile.get_position()
	
	var fileSize = mpbFile.get_64()
	
	var ptrHeader = mpbFile.get_position()
	
	# checking ENDB is in the correct location (at the end of bank)
	mpbFile.seek(fileSize - 4)
	if mpbFile.get_32() != 1111772741:
		print("Error: ENDB is not in the correct place")
		return 1
	
	# checking checksum adds up
	mpbFile.seek(4)
	var calculatedSum = 0
	while mpbFile.get_position() < (fileSize - 8):
		calculatedSum += mpbFile.get_8()
	if calculatedSum != mpbFile.get_32():
		print("Error: Checksum doesn't match")
		return 1
		
	mpbFile.seek(ptrHeader)
	var ptrProgramPointers = mpbFile.get_32()
	var numberOfPrograms = mpbFile.get_32()
	var ptrVelocities = mpbFile.get_32()
	var numberOfVelocities = mpbFile.get_32()
	
	# mpbFile.seek(mpbFile.get_position() + 16) # skip unknown data
	
	# get velocities
	mpbFile.seek(ptrVelocities)
	for i in numberOfVelocities:
		var velocity = []
		for x in 128:
			velocity.append(mpbFile.get_8())
		Velocities.append(velocity)

	# get program pointers
	var programPointers = []
	mpbFile.seek(ptrProgramPointers)
	for i in numberOfPrograms:
		programPointers.append(mpbFile.get_32())


	# Using an index array temporarily to avoid duplicates, as multiple splits
	# might read from the same tone data. I'm defining it here because it's
	# before the program loop, and tone data could be shared across programs.
	var ptrsToneData = []

	# get programs
	for ptrProgram in programPointers:
		programProcess(ptrProgram)
	
	# sort tone data references
	ptrsToneData.sort()
	
	
	# split out tone data
	var ptrsToneDataLen = len(ptrsToneData)
	for index in len(ptrsToneData):
		var ptrToneData = ptrsToneData[index]
		
		mpbFile.seek(ptrToneData)
		
		var endLocation
		
		if index < ptrsToneDataLen - 1:
			endLocation = ptrsToneData[index + 1] # start of next tone data is end of this data
		else: # okay it's the last one
			endLocation = fileSize - 8 # checksum is end of this data
		var ToneData = mpbFile.get_buffer(endLocation - ptrsToneData[index])
		ToneDatas.append(ToneData)
	
	
	# check each split and replace tone data in-file reference with bank indices
	for split in Splits:
		if split.ToneDataIndex != -1:
			split.ToneDataIndex = ptrsToneData.find(split.ToneDataIndex)
		
	var tonedatasaveindex = 0
	for toneData in ToneDatas:
		var pcmToneData = AdpcmCodec.Decode(toneData, true)
		var savedPcmToneData = FileAccess.open("C:\\Users\\madr\\Desktop\\decoded" + str(tonedatasaveindex) + ".raw", FileAccess.WRITE)
		tonedatasaveindex += 1
		savedPcmToneData.store_buffer(pcmToneData)
		savedPcmToneData.flush()
		savedPcmToneData.close()
		
func programProcess(mpbFile: FileAccess, ptrProgram: int):
	#print("Program " + str(programPointers.find(ptrProgram,0)))
	if ptrProgram == 0:
		return
	var program = Program.new()
	Programs.append(program)
	mpbFile.seek(ptrProgram)
		
	# get layers
	for layerNo in 4:
		#print("	Layer " + str(layerNo))
		var ptrLayer = mpbFile.get_32()
		if ptrLayer == 0: # every program has 4 layer pointers, but empty layers point to 0
			continue
			
		mpbFile.seek(ptrLayer) # seek to layer
		
		
		var layer = Layer.new()
		program.Layers.append(layer)
		
		var numberOfSplits = mpbFile.get_32()
		var ptrSplits = mpbFile.get_32()
		layer.LayerDelay = mpbFile.get_16()
		mpbFile.seek(mpbFile.get_position() + 2)
		layer.BendRangeHigh = mpbFile.get_8()
		layer.BendRangeLow = mpbFile.get_8()
		mpbFile.seek(mpbFile.get_position() + 4)
		
		# get splits
		mpbFile.seek(ptrSplits)
		for splitNo in numberOfSplits:
			#print("		Split " + str(splitNo))
			var split = Split.new()
			layer.Splits.append(split)
			Splits.append(split)
			
			var toneDataTemp = mpbFile.get_8()
			var toneDataJump = toneDataTemp & 0x0F
			
			var toneDataFlags = mpbFile.get_8()
			if toneDataFlags & 0b00000001: # true = ADPCM, false = Linear
				split.BitDepth = 4
			else:
				if (toneDataTemp >> 4) == 8:
					split.BitDepth = 8
				else:
					split.BitDepth = 16
			if toneDataFlags & 0b00000010:
				split.Loop = true
			else:
				split.Loop = false
			
			var ptrToneData = mpbFile.get_16() + (toneDataJump * 0x10000)
			#print("			Tone Data at " + str(ptrToneData))
			split.ToneDataStart = mpbFile.get_16() # loopstart
			split.ToneDataEnd = mpbFile.get_16() # numberofsamples
			#print("			Tone Data end: " + str(split.ToneDataEnd))
			
			# save pointer to the tone data
			# we'll later replace this with the index in bank
			if ptrToneData != 0:
				split.ToneDataIndex = ptrToneData
			else:
				split.ToneDataIndex = -1
			
			
			# todo: turn this into a class that includes bitdepth
			if !ptrsToneData.has(ptrToneData):
				ptrsToneData.append(ptrToneData)
			
			
			# mask appropriate bits and shift
			
			var ampEnvelopeChunk1 = mpbFile.get_16()
			split.AttackRate = ampEnvelopeChunk1 & 0x001F
			split.DecayRate1 = (ampEnvelopeChunk1 & 0x07C0) >> 6
			split.DecayRate2 = (ampEnvelopeChunk1 & 0xF800) >> 11
			
			var ampEnvelopeChunk2 = mpbFile.get_16()
			split.DecayLevel = (ampEnvelopeChunk2 & 0x03E0) >> 5
			split.ReleaseRate = (ampEnvelopeChunk2 & 0x001F)
			split.KeyRateScaling = (ampEnvelopeChunk2 & 0x3C00) >> 10
			
			
			mpbFile.seek(mpbFile.get_position() + 2)
			
			
			var lfoSyncChunk = mpbFile.get_16()
			
			split.PitchLfoDepth = (lfoSyncChunk & 0x00E0) >> 5
			split.AmpLfoWave = (lfoSyncChunk & 0x0018) >> 3
			split.AmpLfoDepth = (lfoSyncChunk & 0x0007)
			split.LfoSync = bool((lfoSyncChunk & 0x8000) >> 15)
			split.LfoFrequency = (lfoSyncChunk & 0x7C00) >> 10
			split.PitchLfoWave = (lfoSyncChunk & 0x0300) >> 8
			
			
			var fxChunk = mpbFile.get_8()
			split.FxLevel = (fxChunk & 0xF0) >> 4
			split.FxInputCh = (fxChunk & 0x0F)
			
			
			mpbFile.seek(mpbFile.get_position() + 1)
			
			var panPot = mpbFile.get_8()
			split.PanDirection = (panPot & 0x30) >> 4
			split.PanQuantity = (panPot & 0x0F)
				
			if split.PanDirection == true:
				split.PanQuantity *= -1
			
			split.DirectLevel = mpbFile.get_8()
			
			
			
			var filterOffAndRes = mpbFile.get_8()
			split.FilterOff = (filterOffAndRes & 0x20) >> 5
			split.FilterResonance = (filterOffAndRes & 0x1F)
			
			split.OscLevel = 255 - mpbFile.get_8()
			split.FilterStartLevel = mpbFile.get_16()
			split.FilterAttackLevel = mpbFile.get_16()
			split.FilterDecayLevel1 = mpbFile.get_16()
			split.FilterDecayLevel2 = mpbFile.get_16()
			split.FilterReleaseLevel = mpbFile.get_16()
			split.FilterDecayRate1 = mpbFile.get_8()
			split.FilterAttackRate = mpbFile.get_8()
			split.FilterReleaseRate = mpbFile.get_8()
			split.FilterDecayRate2 = mpbFile.get_8()
			
			
			split.NoteRangeLow = mpbFile.get_8()
			split.NoteRangeHigh = mpbFile.get_8()
			split.BaseNote = mpbFile.get_8()
			split.FineTune = mpbFile.get_8()
			
			mpbFile.seek(mpbFile.get_position() + 2) # skip FFFF
			
			split.VelocityIndex = mpbFile.get_8()
			split.VelocityLow = mpbFile.get_8()
			split.VelocityHigh = mpbFile.get_8()
			
			split.DrumMode = mpbFile.get_8()
			split.DrumGroupID = mpbFile.get_8()
			
			mpbFile.seek(mpbFile.get_position() + 1) # skip 00
		
		# seek to program pointer (list of layers) plus however many layers we've done
		mpbFile.seek(ptrProgram + ((layerNo + 1) * 4))
